"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = validateDocument;
exports.resolveTypeForArrayItem = resolveTypeForArrayItem;
exports.validateDocumentObservable = validateDocumentObservable;
exports.validateItem = validateItem;
var _uniqBy2 = _interopRequireDefault(require("lodash/uniqBy"));
var _flatten2 = _interopRequireDefault(require("lodash/flatten"));
var _types = require("@sanity/types");
var _rxjs = require("rxjs");
var _operators = require("rxjs/operators");
var _typeString = _interopRequireDefault(require("./util/typeString"));
var _requestIdleCallback = require("./util/requestIdleCallback");
var _ValidationError = _interopRequireDefault(require("./ValidationError"));
var _normalizeValidationRules = _interopRequireDefault(require("./util/normalizeValidationRules"));
var _excluded = ["value", "type", "path", "parent"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var isRecord = maybeRecord => typeof maybeRecord === 'object' && maybeRecord !== null && !Array.isArray(maybeRecord);
var isNonNullable = value => value !== null && value !== undefined;

/**
 * @internal
 */
function resolveTypeForArrayItem(item, candidates) {
  // if there is only one type available, assume that it's the correct one
  if (candidates.length === 1) return candidates[0];
  var itemType = (0, _types.isTypedObject)(item) && item._type;
  var primitive = item === undefined || item === null || !itemType && (0, _typeString.default)(item).toLowerCase();
  if (primitive && primitive !== 'object') {
    return candidates.find(candidate => candidate.jsonType === primitive);
  }
  return candidates.find(candidate => {
    var _candidate$type;
    return ((_candidate$type = candidate.type) === null || _candidate$type === void 0 ? void 0 : _candidate$type.name) === itemType;
  }) || candidates.find(candidate => candidate.name === itemType) || candidates.find(candidate => candidate.name === 'object' && primitive === 'object');
}
var EMPTY_MARKERS = [];
function validateDocument(doc, schema, context) {
  return validateDocumentObservable(doc, schema, context).toPromise();
}
function validateDocumentObservable(doc, schema, context) {
  var documentType = schema.get(doc._type);
  if (!documentType) {
    console.warn('Schema type for object type "%s" not found, skipping validation', doc._type);
    return (0, _rxjs.of)(EMPTY_MARKERS);
  }
  return validateItemObservable({
    parent: undefined,
    value: doc,
    path: [],
    document: doc,
    type: documentType,
    getDocumentExists: context === null || context === void 0 ? void 0 : context.getDocumentExists
  }).pipe((0, _operators.catchError)(err => {
    console.error(err);
    return (0, _rxjs.of)([{
      type: 'validation',
      level: 'error',
      path: [],
      item: new _ValidationError.default(err === null || err === void 0 ? void 0 : err.message)
    }]);
  }));
}

/**
 * this is used make optional properties required by replacing optionals with
 * `T[P] | undefined`. this is used to prevent errors in `validateItem` where
 * an option from a previous invocation would be incorrectly passed down.
 *
 * https://medium.com/terria/typescript-transforming-optional-properties-to-required-properties-that-may-be-undefined-7482cb4e1585
 */

function validateItem(opts) {
  return validateItemObservable(opts).toPromise();
}
function validateItemObservable(_ref) {
  var value = _ref.value,
    type = _ref.type,
    _ref$path = _ref.path,
    path = _ref$path === void 0 ? [] : _ref$path,
    parent = _ref.parent,
    restOfContext = _objectWithoutProperties(_ref, _excluded);
  var rules = (0, _normalizeValidationRules.default)(type);
  // run validation for the current value
  var selfChecks = rules.map(rule => (0, _rxjs.defer)(() => rule.validate(value, _objectSpread(_objectSpread({}, restOfContext), {}, {
    parent,
    path,
    type
  }))));

  // run validation for nested values (conditionally)
  var fieldChecks = [];
  var selfIsRequired = rules.some(rule => rule.isRequired());
  var shouldRunNestedObjectValidation =
  // run nested validation for objects
  (type === null || type === void 0 ? void 0 : type.jsonType) === 'object' && (
  // if the value is truthy
  !!value ||
  // or
  // (the value is null or undefined) and the top-level value is required
  (value === null || value === undefined) && selfIsRequired);
  if (shouldRunNestedObjectValidation) {
    var fieldTypes = type.fields.reduce((acc, field) => {
      acc[field.name] = field.type;
      return acc;
    }, {});

    // Validation for rules set at the object level with `Rule.fields({/* ... */})`
    fieldChecks = fieldChecks.concat(rules.map(rule => rule._fieldRules).filter(isNonNullable).flatMap(fieldResults => Object.entries(fieldResults)).flatMap(_ref2 => {
      var _ref3 = _slicedToArray(_ref2, 2),
        name = _ref3[0],
        validation = _ref3[1];
      var fieldType = fieldTypes[name];
      return (0, _normalizeValidationRules.default)(_objectSpread(_objectSpread({}, fieldType), {}, {
        validation
      })).map(subRule => {
        var nestedValue = isRecord(value) ? value[name] : undefined;
        return (0, _rxjs.defer)(() => subRule.validate(nestedValue, _objectSpread(_objectSpread({}, restOfContext), {}, {
          parent: value,
          path: path.concat(name),
          type: fieldType
        })));
      });
    }));

    // Validation from each field's schema `validation: Rule => {/* ... */}` function
    fieldChecks = fieldChecks.concat(type.fields.map(field => validateItemObservable(_objectSpread(_objectSpread({}, restOfContext), {}, {
      parent: value,
      value: isRecord(value) ? value[field.name] : undefined,
      path: path.concat(field.name),
      type: field.type
    }))));
  }

  // note: unlike objects, arrays should not run nested validation for undefined
  // values because we won't have a valid path to put a marker (i.e. missing the
  // key or index in the path) and the downstream form builder won't have a
  // valid target component
  var shouldRunNestedValidationForArrays = (type === null || type === void 0 ? void 0 : type.jsonType) === 'array' && Array.isArray(value);
  if (shouldRunNestedValidationForArrays) {
    fieldChecks = fieldChecks.concat(value.map(item => validateItemObservable(_objectSpread(_objectSpread({}, restOfContext), {}, {
      parent: value,
      value: item,
      path: path.concat((0, _types.isKeyedObject)(item) ? {
        _key: item._key
      } : value.indexOf(item)),
      type: resolveTypeForArrayItem(item, type.of)
    }))));
  }

  // markDefs also do no run nested validation if the parent object is undefined
  // for a similar reason to arrays
  var shouldRunNestedValidationForMarkDefs = (0, _types.isBlock)(value) && value.markDefs.length && (0, _types.isBlockSchemaType)(type);
  if (shouldRunNestedValidationForMarkDefs) {
    var _type$fields = _slicedToArray(type.fields, 1),
      spanChildrenField = _type$fields[0];
    var spanType = spanChildrenField.type.of.find(_types.isSpanSchemaType);
    var annotations = ((spanType === null || spanType === void 0 ? void 0 : spanType.annotations) || []).reduce((acc, annotationType) => {
      acc.set(annotationType.name, annotationType);
      return acc;
    }, new Map());
    fieldChecks = fieldChecks.concat(value.markDefs.map(markDef => validateItemObservable(_objectSpread(_objectSpread({}, restOfContext), {}, {
      parent: value,
      value: markDef,
      path: path.concat(['markDefs', {
        _key: markDef._key
      }]),
      type: annotations.get(markDef._type)
    }))));
  }
  return (0, _rxjs.defer)(() => (0, _rxjs.merge)([...selfChecks, ...fieldChecks])).pipe((0, _operators.mergeMap)(validateNode => (0, _rxjs.concat)(idle(), validateNode), 40), (0, _operators.mergeAll)(), (0, _operators.toArray)(), (0, _operators.map)(_flatten2.default), (0, _operators.map)(results => {
    // run `uniqBy` if `_fieldRules` are present because they can
    // cause repeat markers
    if (rules.some(rule => rule._fieldRules)) {
      return (0, _uniqBy2.default)(results, rule => JSON.stringify(rule));
    }
    return results;
  }));
}
function idle(timeout) {
  return new _rxjs.Observable(observer => {
    var handle = (0, _requestIdleCallback.requestIdleCallback)(() => {
      observer.complete();
    }, timeout ? {
      timeout
    } : undefined);
    return () => (0, _requestIdleCallback.cancelIdleCallback)(handle);
  });
}