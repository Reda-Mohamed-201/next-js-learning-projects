"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.applyWeights = applyWeights;
exports.calculateCharacterScore = calculateCharacterScore;
exports.calculatePhraseScore = calculatePhraseScore;
exports.calculateScore = void 0;
exports.calculateWordScore = calculateWordScore;
exports.findMatchingIndices = findMatchingIndices;
exports.partitionAndSanitizeSearchTerms = partitionAndSanitizeSearchTerms;
var _words2 = _interopRequireDefault(require("lodash/words"));
var _uniq2 = _interopRequireDefault(require("lodash/uniq"));
var _union2 = _interopRequireDefault(require("lodash/union"));
var _toLower2 = _interopRequireDefault(require("lodash/toLower"));
var _partition4 = _interopRequireDefault(require("lodash/partition"));
var _keyBy2 = _interopRequireDefault(require("lodash/keyBy"));
var _intersection2 = _interopRequireDefault(require("lodash/intersection"));
var _compact2 = _interopRequireDefault(require("lodash/compact"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
/**
 * Calculates a score (between 0 and 1) indicating general search relevance of an array of
 * search tokens within a specific string.
 *
 * @param searchTerms - All search terms
 * @param value - The string to match against
 * @returns A [score, story] pair containing the search score as well as a human readable explanation
 * @internal
 */
var calculateScore = (searchTerms, value) => {
  // Separate search terms by phrases (wrapped with quotes) and words.
  var _partitionAndSanitize = partitionAndSanitizeSearchTerms(searchTerms),
    uniqueSearchPhrases = _partitionAndSanitize.phrases,
    uniqueSearchWords = _partitionAndSanitize.words;
  // Calculate an aggregated score of words (partial + whole) and phrase matches.
  var _calculateCharacterSc = calculateCharacterScore(uniqueSearchWords, value),
    _calculateCharacterSc2 = _slicedToArray(_calculateCharacterSc, 2),
    charScore = _calculateCharacterSc2[0],
    charWhy = _calculateCharacterSc2[1];
  var _calculatePhraseScore = calculatePhraseScore(uniqueSearchPhrases, value),
    _calculatePhraseScore2 = _slicedToArray(_calculatePhraseScore, 2),
    phraseScore = _calculatePhraseScore2[0],
    phraseWhy = _calculatePhraseScore2[1];
  var _calculateWordScore = calculateWordScore(uniqueSearchWords, value),
    _calculateWordScore2 = _slicedToArray(_calculateWordScore, 2),
    wordScore = _calculateWordScore2[0],
    wordWhy = _calculateWordScore2[1];
  return [charScore + wordScore + phraseScore, [charWhy, wordWhy, phraseWhy].flat().join(', ')];
};
exports.calculateScore = calculateScore;
var stringify = value => typeof value === 'string' ? value : JSON.stringify(value);

/**
 * Applies path weights from a supplied SearchSpec to existing search hits to create _weighted_ hits
 * augmented with search ranking and human readable explanations.
 *
 * @param searchSpec - SearchSpec containing path weighting
 * @param hits - SearchHit objects to augment
 * @param terms - All search terms
 * @returns WeightedHit array containing search scores and ranking explanations
 * @internal
 */
function applyWeights(searchSpec, hits) {
  var terms = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var specByType = (0, _keyBy2.default)(searchSpec, spec => spec.typeName);
  return hits.reduce((allHits, hit, index) => {
    var typeSpec = specByType[hit._type];
    var stories = typeSpec.paths.map((pathSpec, idx) => {
      var pathHit = ['_id', '_type'].includes(pathSpec.path) ? hit[pathSpec.path] : hit[idx];
      var indices = Array.isArray(pathHit) ? findMatchingIndices(terms, pathHit) : null;
      // Only stringify non-falsy values so null values don't pollute search
      var value = pathHit ? stringify(pathHit) : null;
      if (!value) {
        return {
          path: pathSpec.path,
          score: 0,
          why: 'No match'
        };
      }
      var _calculateScore = calculateScore(terms, value),
        _calculateScore2 = _slicedToArray(_calculateScore, 2),
        score = _calculateScore2[0],
        why = _calculateScore2[1];
      return {
        indices,
        path: pathSpec.path,
        score: score * pathSpec.weight,
        why: "".concat(why, " (*").concat(pathSpec.weight, ")")
      };
    });
    var totalScore = stories.reduce((acc, rank) => acc + rank.score, 0);
    /*
     * Filter out hits with no score.
     * (only if search terms are present, otherwise we always show results)
     *
     * Due to how we generate search queries, in some cases it's possible to have returned search hits
     * which shouldn't be displayed. This can happen when searching on multiple document types and
     * user-configured `__experimental_search` paths are in play.
     *
     * Since search generates a GROQ query with filters that may refer to field names shared across
     * multiple document types, it's possible that one document type searches on a field path
     * that is hidden by another via `__experimental_search`.
     */
    if (terms.length === 0 || totalScore > 0) {
      allHits.push({
        hit,
        resultIndex: hits.length - index,
        score: totalScore,
        stories: stories
      });
    }
    return allHits;
  }, []);
}

/**
 * For phrases: score on the total number of matching characters.
 * E.g. given the phrases ["the fox", "of london"] for the target value "the wily fox of london"
 *
 * - "the fox" isn't included in the target value (score: 0)
 * - "of london" is included in the target value, and 9 out of 22 characters match (score: 9/22 = ~0.408)
 * - non-exact matches have their score divided in half (final score: ~0.204)
 *
 * @param uniqueSearchPhrases - All search phrases
 * @param value - The string to match against
 * @returns SearchScore containing the search score as well as a human readable explanation
 * @internal
 */
function calculatePhraseScore(uniqueSearchPhrases, value) {
  var sanitizedValue = value.toLowerCase().trim();
  var fieldScore = 0;
  var matchCount = 0;
  uniqueSearchPhrases.forEach(term => {
    if (sanitizedValue.includes(term)) {
      fieldScore += term.length / sanitizedValue.length;
      matchCount += term.length;
    }
  });
  return fieldScore === 1 ? [1, '[Phrase] Exact match'] : [fieldScore / 2, "[Phrase] ".concat(matchCount, "/").concat(sanitizedValue.length, " chars")];
}

/**
 * For words: score on the total number of matching words.
 * E.g. given the terms ["bar", "fo"] for the target value "food bar".
 *
 * - "fo" is included in the target value, and 2 out of 7 non-whitespace characters match (score: 2/7)
 * - "bar" is included in the target value, and 3 out of 7 non-whitespace characters match (score: 3/7)
 * - all values are accumulated and have their score devidied by half (final score: ~0.357)
 *
 * @param uniqueSearchTerms - A string array of search terms
 * @param value - The string to match against
 * @returns SearchScore containing the search score as well as a human readable explanation
 * @internal
 */
function calculateCharacterScore(uniqueSearchTerms, value) {
  var sanitizedValue = value.toLowerCase().trim();
  var sanitizedValueCompact = sanitizedValue.replace(/ /g, '');
  var fieldScore = 0;
  var matchCount = 0;
  uniqueSearchTerms.forEach(term => {
    if (sanitizedValue.includes(term)) {
      fieldScore += term.length / sanitizedValueCompact.length;
      matchCount += term.length;
    }
  });
  return fieldScore === 1 ? [fieldScore, "[Char] Contains all"] : [fieldScore / 2, "[Char] ".concat(matchCount, "/").concat(sanitizedValueCompact.length, " chars")];
}

/**
 * Generate a score on the total number of matching _whole_ words.
 * E.g. given the words ["the", "fox", "of", "london"] for the target value "the wily fox of london"
 *
 * - 4 out of 5 words match (score: 4/5 = 0.8)
 * - non-exact matches have their score divided in half (final score: 0.4)
 *
 * @param uniqueSearchTerms - All search terms
 * @param value - The string to match against
 * @returns SearchScore containing the search score as well as a human readable explanation
 * @internal
 */
function calculateWordScore(uniqueSearchTerms, value) {
  var uniqueValueTerms = (0, _uniq2.default)((0, _compact2.default)((0, _words2.default)((0, _toLower2.default)(value))));
  var matches = (0, _intersection2.default)(uniqueSearchTerms, uniqueValueTerms);
  var all = (0, _union2.default)(uniqueValueTerms, uniqueSearchTerms);
  var fieldScore = matches.length / all.length || 0;
  return fieldScore === 1 ? [1, '[Word] Exact match'] : [fieldScore / 2, "[Word] ".concat(matches.length, "/").concat(all.length, " terms: [").concat(matches.join(', '), "]")];
}

/**
 * Partition search terms by phrases (wrapped with quotes) and words.
 *
 * @param searchTerms - All search terms
 * @returns Partitioned phrases and words
 * @internal
 */
function partitionAndSanitizeSearchTerms(searchTerms) {
  var uniqueSearchTerms = (0, _uniq2.default)(searchTerms.map(_toLower2.default));
  var _partition2 = (0, _partition4.default)(uniqueSearchTerms, term => /^".*"$/.test(term)),
    _partition3 = _slicedToArray(_partition2, 2),
    searchPhrases = _partition3[0],
    searchWords = _partition3[1];
  return {
    phrases: (0, _uniq2.default)(searchPhrases).map(_toLower2.default).map(stripWrappingQuotes),
    //
    words: (0, _uniq2.default)(searchWords.map(_toLower2.default))
  };
}

/**
 * Returns matching array indices of `values` containing _any_ member of `uniqueSearchTerms`.
 * When comparing for matches, members of `values` are stringified, trimmed and lowercased.
 *
 * @param uniqueSearchTerms - All search terms
 * @param values - Values to match against (members are stringified)
 * @returns All matching indices in `values`
 * @internal
 */
function findMatchingIndices(uniqueSearchTerms, values) {
  var _partitionAndSanitize2 = partitionAndSanitizeSearchTerms(uniqueSearchTerms),
    uniqueSearchPhrases = _partitionAndSanitize2.phrases,
    uniqueSearchWords = _partitionAndSanitize2.words;
  return values.reduce((acc, val, index) => {
    if (val) {
      var contains = [...uniqueSearchPhrases, ...uniqueSearchWords].some(term => {
        var stringifiedValue = stringify(val).toLowerCase().trim();
        return stringifiedValue.includes(term);
      });
      if (contains) {
        acc.push(index);
      }
    }
    return acc;
  }, []);
}
function stripWrappingQuotes(str) {
  return str.replace(/^"(.*)"$/, '$1');
}