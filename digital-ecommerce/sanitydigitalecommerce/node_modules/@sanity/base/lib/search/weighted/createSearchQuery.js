"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_LIMIT = void 0;
exports.createSearchQuery = createSearchQuery;
exports.createSearchSpecs = createSearchSpecs;
exports.extractTermsFromQuery = extractTermsFromQuery;
var _words2 = _interopRequireDefault(require("lodash/words"));
var _uniq2 = _interopRequireDefault(require("lodash/uniq"));
var _union2 = _interopRequireDefault(require("lodash/union"));
var _trim2 = _interopRequireDefault(require("lodash/trim"));
var _toLower2 = _interopRequireDefault(require("lodash/toLower"));
var _flow2 = _interopRequireDefault(require("lodash/flow"));
var _flatten2 = _interopRequireDefault(require("lodash/flatten"));
var _compact2 = _interopRequireDefault(require("lodash/compact"));
var _searchUtils = require("../../util/searchUtils");
var _tokenize = require("../common/tokenize");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
// Default number of documents to fetch
var DEFAULT_LIMIT = 1000;

// Maximum number of unique searchable attributes to include in a single search query (across all document types)
exports.DEFAULT_LIMIT = DEFAULT_LIMIT;
var SEARCH_ATTR_LIMIT =
// eslint-disable-next-line no-process-env
Number(process.env.SANITY_STUDIO_UNSTABLE_SEARCH_ATTR_LIMIT) || 1000;
var combinePaths = (0, _flow2.default)([_flatten2.default, _union2.default, _compact2.default]);

/**
 * Create search specs from supplied searchable types.
 * Search specs contain weighted paths which are used to construct GROQ queries for search.
 *
 * @param types - Searchable document types to create specs from.
 * @param optimizedIndexPaths - If true, will will convert all `__experimental_search` paths containing numbers into array syntax.
 *  E.g. ['cover', 0, 'cards', 0, 'title'] => "cover[].cards[].title"
 *
 *  This optimization will yield more search results than may be intended, but offers better performance over arrays with indices.
 *  (which are currently unoptimizable by Content Lake)
 * @param maxAttributes - Maximum number of _unique_ searchable attributes to include across all types.
 *  User-provided paths (e.g. with __experimental_search) do not count towards this limit.
 * @returns All matching search specs and `hasIndexedPaths`, a boolean indicating whether any paths contain indices.
 * @internal
 */
function createSearchSpecs(types, optimizeIndexedPaths, maxAttributes) {
  var hasIndexedPaths = false;
  var addedPaths = [];
  var specsByType = types
  // Extract and flatten all paths
  .reduce((acc, val) => {
    var newPaths = val.__experimental_search.map(config => {
      var path = config.path.map(p => {
        if (typeof p === 'number') {
          hasIndexedPaths = true;
          if (optimizeIndexedPaths) {
            return [];
          }
        }
        return p;
      });
      return _objectSpread(_objectSpread({}, config), {}, {
        path: (0, _searchUtils.joinPath)(path),
        pathLength: path.length,
        typeName: val.name
      });
    });
    return acc.concat(newPaths);
  }, [])
  // Sort by path length, typeName, path (asc)
  .sort((a, b) => {
    if (a.pathLength === b.pathLength) {
      if (a.typeName === b.typeName) return a.path > b.path ? 1 : -1;
      return a.typeName > b.typeName ? 1 : -1;
    }
    return a.pathLength > b.pathLength ? 1 : -1;
  })
  // Reduce into specs (by type) and conditionally add unique paths up until the `maxAttributes` limit
  .reduce((acc, val) => {
    var _acc$val$typeName, _acc$val$typeName2;
    var isPathAdded = addedPaths.includes(val.path);
    // Include the current path if its already been added or within the `maxAttributes` limit.
    // User provided paths are always included by default.
    var includeSpec = isPathAdded || val.userProvided || addedPaths.length < maxAttributes;
    if (!isPathAdded && addedPaths.length < maxAttributes) {
      addedPaths.push(val.path);
    }
    var searchPath = {
      mapWith: val.mapWith,
      path: val.path,
      weight: val.weight
    };
    acc[val.typeName] = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, acc[val.typeName]), includeSpec && {
      paths: (((_acc$val$typeName = acc[val.typeName]) === null || _acc$val$typeName === void 0 ? void 0 : _acc$val$typeName.paths) || []).concat([searchPath])
    }), !includeSpec && {
      skippedPaths: (((_acc$val$typeName2 = acc[val.typeName]) === null || _acc$val$typeName2 === void 0 ? void 0 : _acc$val$typeName2.skippedPaths) || []).concat([searchPath])
    }), {}, {
      typeName: val.typeName
    });
    return acc;
  }, {});
  return {
    specs: Object.values(specsByType),
    hasIndexedPaths
  };
}
var pathWithMapper = _ref => {
  var mapWith = _ref.mapWith,
    path = _ref.path;
  return mapWith ? "".concat(mapWith, "(").concat(path, ")") : path;
};

/**
 * Create GROQ constraints, given search terms and the full spec of available document types and fields.
 * Essentially a large list of all possible fields (joined by logical OR) to match our search terms against.
 */
function createConstraints(terms, specs) {
  var combinedSearchPaths = combinePaths(specs.map(configForType => configForType.paths.map(opt => pathWithMapper(opt))));
  var constraints = terms.map((_term, i) => combinedSearchPaths.map(joinedPath => "".concat(joinedPath, " match $t").concat(i))).filter(constraint => constraint.length > 0);
  return constraints.map(constraint => "(".concat(constraint.join('||'), ")"));
}

/**
 * Convert a string into an array of tokenized terms.
 *
 * Any (multi word) text wrapped in double quotes will be treated as "phrases", or separate tokens that
 * will not have its special characters removed.
 * E.g.`"the" "fantastic mr" fox fox book` => ["the", `"fantastic mr"`, "fox", "book"]
 *
 * Phrases wrapped in quotes are assigned relevance scoring differently from regular words.
 *
 * @param query - A string to convert into individual tokens
 * @returns All extracted tokens
 * @internal
 */
function extractTermsFromQuery(query) {
  var quotedQueries = [];
  var unquotedQuery = query.replace(/("[^"]*")/g, match => {
    if ((0, _words2.default)(match).length > 1) {
      quotedQueries.push(match);
      return '';
    }
    return match;
  });

  // Lowercase and trim quoted queries
  var quotedTerms = quotedQueries.map(str => (0, _trim2.default)((0, _toLower2.default)(str)));

  /*
   * Convert (remaining) search query into an array of deduped, sanitized tokens.
   * All white space and special characters are removed.
   * e.g. "The saint of Saint-Germain-des-PrÃ©s" => ['the', 'saint', 'of', 'germain', 'des', 'pres']
   */
  var remainingTerms = (0, _uniq2.default)((0, _compact2.default)((0, _tokenize.tokenize)((0, _toLower2.default)(unquotedQuery))));
  return [...quotedTerms, ...remainingTerms];
}

/**
 * Generate search query data based off provided search terms and options.
 *
 * @param searchTerms - SearchTerms containing a string query and any number of searchable document types.
 * @param searchOpts - Optional search configuration.
 * @returns GROQ query, params and options to be used to fetch search results.
 * @internal
 */
function createSearchQuery(searchTerms) {
  var _searchOpts$sort, _searchOpts$sort2, _searchOpts$offset, _searchOpts$limit;
  var searchOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var filter = searchOpts.filter,
    params = searchOpts.params,
    tag = searchOpts.tag;

  // Extract search terms from string query, factoring in phrases wrapped in quotes
  var terms = extractTermsFromQuery(searchTerms.query);

  /*
   * Create an optimized search spec which removes array indices from __experimental_search paths.
   * e.g. ["authors", 0, "title"] => "authors[].title"
   *
   * These optimized specs are used when building constraints in this search query and assigning
   * weight to search hits.
   */
  var optimizedSpecs = createSearchSpecs(searchTerms.types, true, SEARCH_ATTR_LIMIT).specs;

  // Construct search filters used in this GROQ query
  var filters = ['_type in $__types', searchOpts.includeDrafts === false && "!(_id in path('drafts.**'))", ...createConstraints(terms, optimizedSpecs), filter ? "(".concat(filter, ")") : ''].filter(Boolean);

  // Construct individual type selections based on __experimental_search paths,
  // but ignore _id and _type keys (as these are included in all types)
  var selections = optimizedSpecs.map(spec => {
    var constraint = "_type==\"".concat(spec.typeName, "\"=>");
    var selection = "{".concat(spec.paths.filter(cfg => !['_id', '_type'].includes(cfg.path)).map((cfg, i) => "\"".concat(i, "\":").concat(pathWithMapper(cfg))), "}");
    return "".concat(constraint).concat(selection);
  });
  var selection = selections.length > 0 ? "...select(".concat(selections.join(','), ")") : '';

  // Default to `_id asc` (GROQ default) if no search sort is provided
  var sortDirection = (searchOpts === null || searchOpts === void 0 || (_searchOpts$sort = searchOpts.sort) === null || _searchOpts$sort === void 0 ? void 0 : _searchOpts$sort.direction) || 'asc';
  var sortField = (searchOpts === null || searchOpts === void 0 || (_searchOpts$sort2 = searchOpts.sort) === null || _searchOpts$sort2 === void 0 ? void 0 : _searchOpts$sort2.field) || '_id';
  var query = "*[".concat(filters.join('&&'), "]") + "| order(".concat(sortField, " ").concat(sortDirection, ")") + "[$__offset...$__limit]" + // the following would improve search quality for paths-with-numbers, but increases the size of the query by up to 50%
  // `${hasIndexedPaths ? `[${createConstraints(terms, exactSearchSpec).join(' && ')}]` : ''}` +
  "{_type,_id,".concat(selection, "}");

  // Prepend optional GROQ comments to query
  var groqComments = ((searchOpts === null || searchOpts === void 0 ? void 0 : searchOpts.comments) || []).map(s => "// ".concat(s)).join('\n');
  var updatedQuery = groqComments ? "".concat(groqComments, "\n").concat(query) : query;
  var offset = (_searchOpts$offset = searchOpts === null || searchOpts === void 0 ? void 0 : searchOpts.offset) !== null && _searchOpts$offset !== void 0 ? _searchOpts$offset : 0;
  var limit = ((_searchOpts$limit = searchOpts === null || searchOpts === void 0 ? void 0 : searchOpts.limit) !== null && _searchOpts$limit !== void 0 ? _searchOpts$limit : DEFAULT_LIMIT) + offset;
  return {
    query: updatedQuery,
    params: _objectSpread(_objectSpread({}, toGroqParams(terms)), {}, {
      __types: optimizedSpecs.map(spec => spec.typeName),
      __limit: limit,
      __offset: offset
    }, params || {}),
    options: {
      tag
    },
    searchSpec: optimizedSpecs,
    terms
  };
}
var toGroqParams = terms => {
  var params = {};
  return terms.reduce((acc, term, i) => {
    acc["t".concat(i)] = "".concat(term, "*"); // "t" is short for term
    return acc;
  }, params);
};