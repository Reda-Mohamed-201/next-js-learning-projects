"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isArraySchemaType = isArraySchemaType;
exports.isBlockSchemaType = isBlockSchemaType;
exports.isCrossDatasetReferenceSchemaType = isCrossDatasetReferenceSchemaType;
exports.isListObjectField = isListObjectField;
exports.isObjectSchemaType = isObjectSchemaType;
exports.isReferenceSchemaType = isReferenceSchemaType;
exports.isSpanChildrenObjectField = isSpanChildrenObjectField;
exports.isSpanSchemaType = isSpanSchemaType;
exports.isStyleObjectField = isStyleObjectField;
exports.isTitledListValue = isTitledListValue;
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function isRecord(value) {
  return !!value && (typeof value == 'object' || typeof value == 'function');
}
function isObjectSchemaType(type) {
  if (!isRecord(type)) return false;
  return type.jsonType === 'object';
}
function isArraySchemaType(type) {
  if (!isRecord(type)) return false;
  return type.jsonType === 'array';
}
function isReferenceSchemaType(type) {
  return isRecord(type) && (type.name === 'reference' || isReferenceSchemaType(type.type));
}
function isCrossDatasetReferenceSchemaType(type) {
  return isRecord(type) && (type.name === 'crossDatasetReference' || isCrossDatasetReferenceSchemaType(type.type));
}
function isTitledListValue(item) {
  return typeof item === 'object' && item !== null && 'title' in item && 'value' in item;
}
function isSpanSchemaType(type) {
  if (!isRecord(type)) return false;
  // we check for `annotations` and `decorators` instead of `type.name` because
  // schema names can technically change if someone extends the type
  return Array.isArray(type.annotations) && Array.isArray(type.decorators);
}
function isBlockSchemaType(type) {
  if (!isRecord(type)) return false;
  if (!Array.isArray(type.fields)) return false;
  var _type$fields = _slicedToArray(type.fields, 3),
    maybeSpanChildren = _type$fields[0],
    maybeStyle = _type$fields[1],
    maybeList = _type$fields[2];
  return isSpanChildrenObjectField(maybeSpanChildren) && isStyleObjectField(maybeStyle) && isListObjectField(maybeList);
}
function isStyleObjectField(field) {
  if (!isRecord(field)) return false;
  if (field.name !== 'style') return false;
  return isRecord(field.type) && field.type.jsonType === 'string';
}
function isListObjectField(field) {
  if (!isRecord(field)) return false;
  if (field.name !== 'list') return false;
  return isRecord(field.type) && field.type.jsonType === 'string';
}
function isSpanChildrenObjectField(field) {
  if (!isRecord(field)) return false;
  if (field.name !== 'children') return false;
  if (!isArraySchemaType(field.type)) return false;
  // there will always be a span item in `SpanChildrenObjectField`
  return field.type.of.some(isSpanSchemaType);
}