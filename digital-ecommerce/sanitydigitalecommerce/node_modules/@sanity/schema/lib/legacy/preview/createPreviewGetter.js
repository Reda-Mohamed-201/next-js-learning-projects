"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createPreviewGetter;
var _pick2 = _interopRequireDefault(require("lodash/pick"));
var _guessPreviewConfig = _interopRequireDefault(require("./guessPreviewConfig"));
var _deprecationUtils = require("./deprecationUtils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function parseSelection(selection) {
  return selection.reduce((acc, field) => {
    acc[field] = field;
    return acc;
  }, {});
}
function parsePreview(preview) {
  if (!preview) {
    return preview;
  }
  var select = preview.select || preview.fields || {};
  if (Array.isArray(select)) {
    return _objectSpread(_objectSpread({}, (0, _pick2.default)(preview, ['prepare', 'component'])), {}, {
      select: parseSelection(select)
    });
  }
  return _objectSpread(_objectSpread({}, (0, _pick2.default)(preview, ['prepare', 'component'])), {}, {
    select
  });
}
function createPreviewGetter(objectTypeDef) {
  return function previewGetter() {
    (0, _deprecationUtils.warnIfPreviewOnOptions)(objectTypeDef);
    (0, _deprecationUtils.warnIfPreviewHasFields)(objectTypeDef);
    var preview = parsePreview(objectTypeDef.preview || (objectTypeDef.options || {}).preview);
    return preview || (0, _guessPreviewConfig.default)(objectTypeDef);
  };
}