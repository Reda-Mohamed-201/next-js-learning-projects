"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var _default = [{
  name: 'array',
  jsonType: 'array'
}, {
  name: 'block',
  jsonType: 'object'
}, {
  name: 'boolean',
  jsonType: 'boolean'
}, {
  name: 'datetime',
  jsonType: 'string'
}, {
  name: 'date',
  jsonType: 'string'
}, {
  name: 'document',
  jsonType: 'object'
}, {
  name: 'email',
  jsonType: 'string'
}, {
  name: 'file',
  jsonType: 'object'
}, {
  name: 'geopoint',
  jsonType: 'object'
}, {
  name: 'image',
  jsonType: 'object'
}, {
  name: 'number',
  jsonType: 'number'
}, {
  name: 'object',
  jsonType: 'object'
}, {
  name: 'reference',
  jsonType: 'object'
}, {
  name: 'crossDatasetReference',
  jsonType: 'object'
}, {
  name: 'slug',
  jsonType: 'object'
}, {
  name: 'string',
  jsonType: 'string'
}, {
  name: 'telephone',
  jsonType: 'string'
}, {
  name: 'text',
  jsonType: 'string'
}, {
  name: 'url',
  jsonType: 'string'
}].map(t => _objectSpread(_objectSpread({}, t), {}, {
  type: 'type'
}));
exports.default = _default;